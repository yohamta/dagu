{{define "content"}}
<div id="root"></div>
<script type="text/babel">
  const TAB_ID__STATUS = 0;
  const TAB_ID__CONFIG = 1;
  const TAB_ID__HISTORY = 2;
  const TAB_ID__STEPLOG = 3;
  const TAB_ID__SC_LOG = 4;
  const visibleTabs = [
    ["Status", TAB_ID__STATUS],
    ["Config", TAB_ID__CONFIG],
    ["History", TAB_ID__HISTORY],
  ];
  const SCHEDULER_STATUS__NONE = 0;
  const SCHEDULER_STATUS__RUNNING = 1;
  const SCHEDULER_STATUS__ERROR = 2;
  const SCHEDULER_STATUS__CANCEL = 3;
  const SCHEDULER_STATUS__SUCCESS = 4;
  const SCHEDULER_STATUS__SKIPPED_UNUSED = 5;
  const statusColorMapping = {
    [SCHEDULER_STATUS__NONE]: { backgroundColor: "lightblue", },
    [SCHEDULER_STATUS__RUNNING]: { backgroundColor: "lime", },
    [SCHEDULER_STATUS__ERROR]: { backgroundColor: "red", color: "white" },
    [SCHEDULER_STATUS__CANCEL]: { backgroundColor: "pink" },
    [SCHEDULER_STATUS__SUCCESS]: { backgroundColor: "green", color: "white" },
    [SCHEDULER_STATUS__SKIPPED_UNUSED]: { backgroundColor: "gray", color: "white" },
  }
  const NODE_STATUS__NONE = 0;
  const NODE_STATUS__RUNNING = 1
  const NODE_STATUS__ERROR = 2;
  const NODE_STATUS__CANCEL = 3;
  const NODE_STATUS__SUCCESS = 4;
  const NODE_STATUS__SKIPPED = 5;

  const DataContext = React.createContext({
    refresh: () => { },
  });

  function Title({ title }) {
    return (
      <div className="has-background-white py-3">
        <div className="is-flex is-flex-direction-row is-justify-content-space-between is-align-items-center is-align-content-center">
          <h2 className="title ml-2">{title}</h2>
          <DataContext.Consumer>
            {
              (props) => <ControlButtons data={props.data}></ControlButtons>
            }
          </DataContext.Consumer>
        </div>
      </div>
    )
  }
  function Tabs({ tab }) {
    const classes = visibleTabs.map((elem) => elem[1] == tab ? "is-active" : "")
    return (
      <div className="has-background-white is-flex is-flex-direction-row is-justify-content-space-between is-align-items-center pt-2 pb-2">
        <div className="tabs is-toggle mb-0 px-3 has-text-weight-semibold">
          <ul>
            {visibleTabs.map((elem, i) => {
              const c = classes[i];
              const href = "?group={{.Group}}&t=" + elem[1];
              return <li className={c}><a href={href}>{elem[0]}</a></li>
            })}
          </ul>
        </div>
        <DataContext.Consumer>
          {
            (props) => <EditControls data={props.data}></EditControls>
          }
        </DataContext.Consumer>
      </div>
    )
  }
  function SubTabs({ tab, active, setActive }) {
    let tabs = [];
    if (tab == TAB_ID__STATUS) {
      tabs = ["Graph", "Timeline"];
    }
    if (tabs.length == 0) {
      return null;
    }
    const classes = tabs.map((_, i) => i == active ? "is-active" : "")
    return (
      <div className="has-background-white">
        <div className="tabs is-toggle is-small mb-0 px-3 pb-3 has-text-weight-semibold">
          <ul>
            {tabs.map((elem, i) => {
              const c = classes[i];
              return <li className={c}><a onClick={() => setActive(i)}>{elem}</a></li>
            })}
          </ul>
        </div>
      </div>
    )
  }
  function Error({ errors }) {
    if (!errors || errors.length == 0) {
      return null;
    }
    return (
      <div class="notification is-danger mt-0 mb-0">
        <div>Please check the below errors!</div>
        <div class="content">
          <ul>
            {errors.map(e => <li>{e}</li>)}
          </ul>
        </div>
      </div>
    )
  }
  function App() {
    const [data, setData] = React.useState(undefined);
    const [sub, setSub] = React.useState(0);
    async function getData() {
      const resp = await fetch("", {
        method: "GET",
        cache: 'no-store',
        headers: {
          'Accept': 'application/json'
        },
      })
      if (!resp.ok) {
        return
      }
      const body = await resp.json()
      setData(body)
    }
    React.useEffect(() => {
      getData();
      if ("{{.Tab}}" == TAB_ID__STATUS || "{{.Tab}}" == TAB_ID__CONFIG) {
        const timer = setInterval(getData, 2000);
        return () => clearInterval(timer);
      }
    }, []);
    if (!data) {
      return (
        <div>
          Loading...
        </div>
      )
    }
    const contents = {
      [TAB_ID__STATUS]: <StatusTab data={data} subTab={sub} />,
      [TAB_ID__CONFIG]: <ConfigTab data={data} />,
      [TAB_ID__HISTORY]: <HistTab data={data} />,
      [TAB_ID__STEPLOG]: <StepLogTab data={data} />,
      [TAB_ID__SC_LOG]: <ScLogTab data={data} />,
    }
    const ctx = {
      data: data,
      refresh: getData,
    }
    return (
      <DataContext.Provider value={ctx}>
        <Error errors={data.Errors}></Error>
        <Title title={data.Title}></Title>
        <Tabs tab={data.Tab}></Tabs>
        <SubTabs tab={data.Tab} active={sub} setActive={setSub}></SubTabs>
        <div class="mx-5 mt-5">
          {contents[data.Tab]}
        </div>
      </DataContext.Provider>
    );
  }

  function HistTab({ data }) {
    const [idx, setIdx] = React.useState(data.LogData.Logs.length - 1);
    const [logs, gridData] = React.useMemo(() => {
      return [
        data.LogData.Logs.reverse(),
        data.LogData.GridData,
      ];
    }, [data])
    return (
      <div>
        <HistTable logs={logs} gridData={gridData} onSelect={setIdx} idx={idx} />
        {logs && logs[idx] ? (
          <React.Fragment>
            <StatusTable status={logs[idx].Status}></StatusTable>
            <NodeTable
              nodes={logs[idx].Status.Nodes}
              file={logs[idx].File}
              dag={data.DAG}
            ></NodeTable>
            <NodeTable
              nodes={getHandlersFromStatus(logs[idx].Status)}
              file={logs[idx].File}
              dag={data.DAG}
            ></NodeTable>
          </React.Fragment>
        ) : null}
      </div>
    )
  }
  function HistTable({ logs, gridData, onSelect, idx }) {
    const colstyle = {
      minWidth: "30px",
      maxWidth: "30px",
      width: "30px",
    }
    const tableStyle = { userSelect: 'none' }
    return (
      <table className="table is-fullwidth card" style={tableStyle}>
        <thead className="has-background-light">
          <th>Date</th>
          {logs.map((log, i) => {
            let td;
            let startedAt = logs[i].Status.StartedAt;
            if (startedAt && startedAt != "-") {
              td = moment(startedAt).format("M/D")
            } else {
              td = moment().format("M/D");
            }
            const flag = (i == 0 || moment(logs[i - 1].Status.StartedAt).format("M/D") != td)
            const style = Object.assign({}, colstyle);
            if (!flag) {
              style.borderLeft = "none";
            }
            if (i < logs.length - 1) {
              style.borderRight = "none";
            }
            return (
              <th key={log.Status.StartedAt} style={style} onClick={() => {
                onSelect(i)
              }}>
                {flag ? td : ""}
              </th>
            )
          })}
        </thead>
        <tbody>
          {
            gridData.map(data => {
              return (
                <HistRow key={data.Name} data={data} onSelect={onSelect} idx={idx}></HistRow>)
            })
          }
        </tbody>
      </table>
    )
  }
  const circleStyle = {
    width: "20px",
    height: "20px",
    borderRadius: "50%",
    backgroundColor: "#000000",
  }
  function HistRow({ data, onSelect, idx }) {
    const vals = React.useMemo(() => {
      return data.Vals.reverse();
    }, [data])
    return (
      <tr>
        <td className="has-text-weight-semibold">{data.Name}</td>
        {vals.map((status, i) => {
          const style = Object.assign({}, circleStyle)
          const tdStyle = {}
          if (i == idx) {
            tdStyle.backgroundColor = "#FFDDAD"
          }
          if (status != 0) {
            style.backgroundColor = statusColorMapping[status].backgroundColor
            style.color = statusColorMapping[status].color
          }
          return (<td key={i} onClick={() => {
            onSelect(i);
          }} style={tdStyle}>{status != 0 ? (
            <div style={style}></div>
          ) : ""}</td>)
        })}
      </tr>
    )
  }
  function ConfigTab({ data }) {
    const mermaidStyle = {
      display: 'flex', alignItems: 'flex-center', justifyContent: 'flex-start',
      width: (data.DAG.Config.Steps.length * 240) + "px",
      minWidth: "100%",
      minHeight: "100px",
    };
    const [editing, setEditing] = React.useState(false);
    const [currentValue, setCurrentValue] = React.useState(data.Definition);
    const handlers = getHandlersFromConfig(data.DAG.Config);
    return (
      <DataContext.Consumer>
        {
          (props) => (
            <div>
              <DagGraph steps={data.DAG.Config.Steps} type="config"></DagGraph>
              <ConfigTable config={data.DAG.Config}></ConfigTable>
              <StepConfigTable steps={data.DAG.Config.Steps}></StepConfigTable>
              <StepConfigTable steps={handlers}></StepConfigTable>

              <div class="content">
                <div class="box">
                  <h2>{data.DAG.Config.ConfigPath}</h2>
                  {editing ? (
                    <ConfigEditor value={data.Definition}
                      onCancel={() => setEditing(false)}
                      onSave={async () => {
                        const formData = new FormData();
                        formData.append('action', 'save');
                        formData.append('value', currentValue);
                        const resp = await fetch("", {
                          method: "POST",
                          headers: {
                            'Accept': 'application/json'
                          },
                          body: formData,
                        })
                        if (resp.ok) {
                          setEditing(false);
                          props.refresh();
                        } else {
                          const e = await resp.text();
                          alert(e);
                        }
                      }}
                      onChange={(newValue, event) => {
                        setCurrentValue(newValue);
                      }}
                    ></ConfigEditor>
                  ) : <ConfigPreview value={data.Definition}
                    onEdit={() => {
                      setEditing(true);
                    }}
                  ></ConfigPreview>}
                </div>
              </div>
            </div>
          )
        }
      </DataContext.Consumer>
    )
  }
  function StatusTab({ data, subTab }) {
    const handlers = getHandlersFromStatus(data.DAG.Status);
    return (
      <div>
        {subTab == 0 ? (
          <DagGraph steps={data.DAG.Status.Nodes} type="status"></DagGraph>
        ) : (<Timeline status={data.DAG.Status}></Timeline>)}
        <StatusTable status={data.DAG.Status}></StatusTable>
        <NodeTable nodes={data.DAG.Status.Nodes} dag={data.DAG}></NodeTable>
        <NodeTable nodes={handlers}></NodeTable>
      </div>
    );
  }
  const graphStatusMap = {
    [NODE_STATUS__NONE]: ":::none",
    [NODE_STATUS__RUNNING]: ":::running",
    [NODE_STATUS__ERROR]: ":::error",
    [NODE_STATUS__CANCEL]: ":::cancel",
    [NODE_STATUS__SUCCESS]: ":::done",
    [NODE_STATUS__SKIPPED]: ":::skipped"
  }
  function DagGraph({ steps, type = "status" }) {
    const mermaidStyle = {
      display: 'flex',
      alignItems: 'flex-center',
      justifyContent: 'flex-start',
      width: (steps.length * 240) + "px",
      minWidth: "100%",
      minHeight: "100px",
    };
    const graph = React.useMemo(() => {
      if (!steps) {
        return "";
      }
      let dat = [
        "flowchart LR;"
      ];
      const addNodeFn = (step, status) => {
        const id = step.Name.replaceAll(" ", "_");
        let c = graphStatusMap[status] || "";
        dat.push(`${id}(${step.Name})${c};`)
        if (step.Depends) {
          step.Depends.forEach((d) => {
            const depId = d.replaceAll(" ", "_");
            dat.push(`${depId}-->${id};`)
          })
        }
      }
      if (type == "status") {
        steps.forEach(s => addNodeFn(s.Step, s.Status));
      } else {
        steps.forEach(s => addNodeFn(s, NODE_STATUS__NONE));
      }
      dat.push("classDef none fill:white,stroke:lightblue,stroke-width:2px");
      dat.push("classDef running fill:white,stroke:lime,stroke-width:2px");
      dat.push("classDef error fill:white,stroke:red,stroke-width:2px");
      dat.push("classDef cancel fill:white,stroke:pink,stroke-width:2px");
      dat.push("classDef done fill:white,stroke:green,stroke-width:2px");
      dat.push("classDef skipped fill:white,stroke:gray,stroke-width:2px");
      return dat.join("\n");
    }, [steps]);
    return (
      <MermaidC style={mermaidStyle}>{graph}</MermaidC>
    )
  }
  function StepLogTab({ data }) {
    return (
      <div>
        <pre>{data.StepLog.Content}</pre>
      </div>
    );
  }
  function ScLogTab({ data }) {
    return (
      <div>
        <pre>{data.ScLog.Content}</pre>
      </div>
    );
  }
  const ConfigTabColStyles = [
    { width: "200px" },
    { width: "200px" },
    { width: "150px" },
    { width: "150px" },
    {}
  ]
  function ConfigTable({ config, file = "" }) {
    const tableStyle = {
      "tableLayout": "fixed",
      "wordWrap": "break-word",
    };
    const styles = ConfigTabColStyles
    const preconditions = config.Preconditions.map(c => (
      <li>{c.Condition}{' => '}{c.Expected}</li>
    ))
    let i = 0;
    return (
      <div className="mb-4 mt-4 card">
        <table className="table is-bordered is-fullwidth card" style={tableStyle}>
          <thead className="has-background-light">
            <tr>
              <th style={styles[i++]}>Name</th>
              <th style={styles[i++]}>Description</th>
              <th style={styles[i++]}>MaxActiveRuns</th>
              <th style={styles[i++]}>Params</th>
              <th style={styles[i++]}>Preconditions</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td className="has-text-weight-semibold"> {config.Name} </td>
              <td> <MultilineText>{config.Description}</MultilineText> </td>
              <td> {config.MaxActiveRuns} </td>
              <td> {config.DefaultParams} </td>
              <td> <ul>{preconditions}</ul> </td>
            </tr>
          </tbody>
        </table>
      </div>
    )
  }
  function getHandlersFromStatus(s) {
    const r = [];
    if (s.OnSuccess) {
      r.push(s.OnSuccess);
    }
    if (s.OnFailure) {
      r.push(s.OnFailure);
    }
    if (s.OnCancel) {
      r.push(s.OnCancel);
    }
    if (s.OnExit) {
      r.push(s.OnExit);
    }
    return r
  }
  function getHandlersFromConfig(c) {
    const r = [];
    const h = c.HandlerOn;
    if (h.Success) {
      r.push(h.Success);
    }
    if (h.Failure) {
      r.push(h.Failure);
    }
    if (h.Cancel) {
      r.push(h.Cancel);
    }
    if (h.Exit) {
      r.push(h.Exit);
    }
    return r
  }
  const StepConfigTabColStyles = [
    { width: "200px" },
    { width: "200px" },
    { width: "300px" },
    { width: "220px" },
    { width: "150px" },
    { width: "80px" },
    {},
  ]
  function StepConfigTable({ steps, file = "" }) {
    const tableStyle = {
      "tableLayout": "fixed",
      "wordWrap": "break-word",
    };
    const styles = StepConfigTabColStyles
    let i = 0;
    if (!steps.length) {
      return null;
    }
    return (
      <div className="mb-4">
        <table className="table is-bordered is-fullwidth card" style={tableStyle}>
          <thead className="has-background-light">
            <tr>
              <th style={styles[i++]}>Name</th>
              <th style={styles[i++]}>Description</th>
              <th style={styles[i++]}>Command</th>
              <th style={styles[i++]}>Args</th>
              <th style={styles[i++]}>Dir</th>
              <th style={styles[i++]}>Repeat</th>
              <th style={styles[i++]}>Preconditions</th>
            </tr>
          </thead>
          <tbody>
            {steps.map((step, idx) => <StepConfigTableRow key={idx} step={step}></StepConfigTableRow>)}
          </tbody>
        </table>
      </div>
    )
  }
  function StepConfigTableRow({ step }) {
    const preconditions = step.Preconditions.map(c => (
      <li>{c.Condition}{' => '}{c.Expected}</li>
    ))
    return (
      <tr>
        <td className="has-text-weight-semibold"> {step.Name} </td>
        <td> <MultilineText>{step.Description}</MultilineText> </td>
        <td> {step.Command} </td>
        <td> {step.Args ? step.Args.join(" ") : ""} </td>
        <td> {step.Dir} </td>
        <td> {step.Repeat ? step.RepeatInterval + " sec" : "-"} </td>
        <td> <ul> {preconditions} </ul> </td>
      </tr>
    )
  }
  const statusTabColStyles = [
    { width: "240px" },
    { width: "150px" },
    { width: "150px" },
    { width: "150px" },
    { width: "130px" },
    { width: "130px" },
    {},
  ]
  function Timeline({ status }) {
    if (status.Status == 0 || status.Status == 1) {
      // the DAG is not running or running
      return null;
    }
    const graph = React.useMemo(() => {
      let ret = [
        "gantt",
        "title Finished timeline",
        "dateFormat YYYY-MM-DD HH:mm:ss",
        "axisFormat %H:%M:%S",
        "todayMarker off"
      ];
      [...status.Nodes].sort((a, b) => {
        return a.StartedAt.localeCompare(b.StartedAt);
      }).forEach((step) => {
        if (!step.StartedAt || step.StartedAt == "-") {
          return;
        }
        ret.push(
          step.Step.Name + " : "
          + moment(step.StartedAt).format("YYYY-MM-DD HH:mm:ss")
          + ","
          + moment(step.FinishedAt).format("YYYY-MM-DD HH:mm:ss")
        );
      });
      return ret.join("\n");
    }, [status])
    return (
      <MermaidC>{graph}</MermaidC>
    );
  }
  function StatusTable({ status, file = "" }) {
    const tableStyle = {
      "tableLayout": "fixed",
      "wordWrap": "break-word",
    };
    const styles = statusTabColStyles;
    const url = encodeURI("?t=" + TAB_ID__SC_LOG + "&group={{.Group}}&file=" + file)
    let i = 0;
    return (
      <div className="mt-4">
        <table className="table is-bordered is-fullwidth card" style={tableStyle}>
          <thead className="has-background-light">
            <tr>
              <th style={styles[i++]}>Request ID</th>
              <th style={styles[i++]}>DAG Name</th>
              <th style={styles[i++]}>Started At</th>
              <th style={styles[i++]}>Finished At</th>
              <th style={styles[i++]}>Status</th>
              <th style={styles[i++]}>Params</th>
              <th style={styles[i++]}>Scheduler Log</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td> {status.RequestId || "-"} </td>
              <td className="has-text-weight-semibold"> {status.Name} </td>
              <td> {status.StartedAt} </td>
              <td> {status.FinishedAt} </td>
              <td> <StatusTag status={status.Status}>{status.StatusText}</StatusTag></td>
              <td> {status.Params} </td>
              <td> <a href={url}> {status.Log} </a> </td>
            </tr>
          </tbody>
        </table>
      </div>
    )
  }
  const stepTabColStyles = [
    { width: "40px" },
    { width: "200px" },
    { width: "150px" },
    { width: "150px" },
    { width: "150px" },
    { width: "130px" },
    { width: "130px" },
    { width: "100px" },
    { width: "100px" },
    {},
  ]
  function NodeTable({ nodes, file = "", dag }) {
    const [modal, setModal] = React.useState(false);
    const [current, setCurrent] = React.useState(null);
    const requireModal = (step) => {
      if (dag.Status.Status == SCHEDULER_STATUS__RUNNING || dag.Status.Status == SCHEDULER_STATUS__NONE) {
        return;
      }
      setCurrent(step);
      setModal(true);
    }
    const dismissModal = () => { setModal(false); }
    React.useEffect(() => {
      document.addEventListener('keydown', (event) => {
        const e = event || window.event;
        if (e.keyCode === 27) { // Escape key
          setModal(false);
        }
      });
      return () => {
        document.removeEventListener('keydown');
      };
    }, [])
    const tableStyle = {
      "tableLayout": "fixed",
      "wordWrap": "break-word",
    };
    const divStyle = {
      "overflow-x": "auto",
    };
    const styles = stepTabColStyles;
    const modalbuttonStyle = {};
    const modalStyle = {
      display: modal ? "flex" : "none",
    }
    let i = 0;
    if (!nodes.length) {
      return null;
    }
    return (
      <div className="card mt-4" style={divStyle}>
        <table className="table is-bordered is-fullwidth card" style={tableStyle}>
          <thead className="has-background-light">
            <tr>
              <th style={styles[i++]}>#</th>
              <th style={styles[i++]}>Step Name</th>
              <th style={styles[i++]}>Description</th>
              <th style={styles[i++]}>Command</th>
              <th style={styles[i++]}>Args</th>
              <th style={styles[i++]}>Started At</th>
              <th style={styles[i++]}>Finished At</th>
              <th style={styles[i++]}>Status</th>
              <th style={styles[i++]}>Error</th>
              <th style={styles[i++]}>Log</th>
            </tr>
          </thead>
          <tbody>
            {nodes.map((n, idx) => <NodeTableRow rownum={idx + 1} node={n} file={file} onRequireModal={requireModal}></NodeTableRow>)}
          </tbody>
        </table>

        {current ? (
          <div className="modal is-active" style={modalStyle}>
            <div className="modal-background"></div>
            <div className="modal-card">
              <header className="modal-card-head">
                <p className="modal-card-title">Update status of "{current.Name}"</p>
                <button className="delete" aria-label="close" onClick={dismissModal}></button>
              </header>
              <section className="modal-card-body">
                <div className="mr-4 pt-4 is-flex is-flex-direction-row">
                  <form method="post" onSubmit={null}>
                    <input type="hidden" name="group" value="{{.Group}}"></input>
                    <input type="hidden" name="request-id" value={dag.Status.RequestId}></input>
                    <input type="hidden" name="step" value={current.Name}></input>
                    <button type="submit" name="action" value="mark-success"
                      className="button is-info"
                      style={modalbuttonStyle}>
                      <span>Mark Success</span>
                    </button>
                  </form>
                  <form method="post" onSubmit={null}>
                    <input type="hidden" name="group" value="{{.Group}}"></input>
                    <input type="hidden" name="request-id" value={dag.Status.RequestId}></input>
                    <input type="hidden" name="step" value={current.Name}></input>
                    <button type="submit" name="action" value="mark-failed"
                      className="button is-info ml-4"
                      style={modalbuttonStyle}>
                      <span>Mark Failed</span>
                    </button>
                  </form>
                </div>
              </section>
              <footer className="modal-card-foot">
                <button className="button" onClick={dismissModal}>Cancel</button>
              </footer>
            </div>
          </div>

        ) : null}
      </div>
    )
  }
  function MultilineText({ children }) {
    return (
      <React.Fragment>
        {children.split("\n").map((l, i) => (<span key={i}>{l}<br></br></span>))}
      </React.Fragment>
    )
  }
  function NodeTableRow({ rownum, node, file, onRequireModal }) {
    const url = encodeURI("?t=" + TAB_ID__STEPLOG + "&group={{.Group}}&file=" + file + "&step=" + node.Step.Name)
    const buttonStyle = {
      "margin": "0px",
      "padding": "0px",
      "border": "0px",
      "background": "none",
      "outline": "none",
    };
    return (
      <tr>
        <td> {rownum} </td>
        <td> {node.Step.Name} </td>
        <td> <MultilineText>{node.Step.Description}</MultilineText> </td>
        <td> {node.Step.Command} </td>
        <td> {node.Step.Args ? node.Step.Args.join(" ") : ""} </td>
        <td> {node.StartedAt} </td>
        <td> {node.FinishedAt} </td>
        <td> <button style={buttonStyle} onClick={() => onRequireModal(node.Step)}>
          <StatusTag status={node.Status}>{node.StatusText}</StatusTag>
        </button> </td>
        <td> {node.Error} </td>
        <td> <a href={url}> {node.Log} </a> </td>
      </tr>
    )
  }
  function ControlButtons({ data }) {
    const onSubmit = React.useMemo(() => {
      const func = (warn) => {
        return (e) => {
          if (!confirm(warn)) {
            e.preventDefault();
          }
        }
      }
      return {
        "start": func('Do you really want to start the DAG?'),
        "stop": func('Do you really want to cancel the DAG?'),
        "retry": func(
          "Do you really want to retry the last execution (" +
          data.DAG.Status.RequestId + ") ?"),
      }
    }, [data.DAG.Status.RequestId]);
    const buttonStyle = React.useMemo(() => ({
      "start": { width: "100px", backgroundColor: "gray", border: 0, color: "white", },
      "stop": { width: "100px", backgroundColor: "gray", border: 0, color: "white", },
      "retry": { width: "100px", backgroundColor: "gray", border: 0, color: "white", },
    }), []);
    const buttonState = React.useMemo(() => ({
      "start": data.DAG.Status.Status != SCHEDULER_STATUS__RUNNING,
      "stop": data.DAG.Status.Status == SCHEDULER_STATUS__RUNNING,
      "retry": data.DAG.Status.Status != SCHEDULER_STATUS__RUNNING
        && data.DAG.Status.RequestId != "",
    }), [data]);
    return (
      <div className="mr-4 pt-4 is-flex is-flex-direction-row">
        <form method="post" onSubmit={onSubmit["start"]}>
          <input type="hidden" name="group" value="{{.Group}}"></input>
          <button type="submit" name="action" value="start"
            className="button is-rounded"
            disabled={!buttonState["start"]}
            style={buttonStyle["start"]}>
            <span class="icon">
              <i class="lni lni-play"></i>
            </span>
            <span>Start</span>
          </button>
        </form>
        <form method="post" onSubmit={onSubmit["stop"]}>
          <input type="hidden" name="group" value="{{.Group}}"></input>
          <button type="submit" name="action" value="stop"
            className="button is-rounded ml-4"
            disabled={!buttonState["stop"]}
            style={buttonStyle["stop"]}>
            <span class="icon">
              <i class="lni lni-stop"></i>
            </span>
            <span>Stop</span>
          </button>
        </form>
        <form method="post" onSubmit={onSubmit["retry"]}>
          <input type="hidden" name="group" value="{{.Group}}"></input>
          <input type="hidden" name="request-id" value={data.DAG.Status.RequestId}></input>
          <button type="submit" name="action" value="retry"
            className="button is-rounded ml-4"
            disabled={!buttonState["retry"]}
            style={buttonStyle["retry"]}>
            <span class="icon">
              <i class="lni lni-spinner-arrow"></i>
            </span>
            <span>Retry</span>
          </button>
        </form>
      </div>
    )
  }
  function EditControls({ data }) {
    const buttonStyle = React.useMemo(() => ({
      "rename": { width: "100px" },
    }), []);
    if ("{{.Tab}}" != TAB_ID__CONFIG) {
      return null;
    }
    return (
      <div className="mt-0 mb-0 mr-4 is-flex is-flex-direction-row">
        <button type="submit" name="action" value="rename"
          className="button is-info is-small is-outlined"
          disabled={false}
          style={buttonStyle["rename"]}
          onClick={async () => {
            const name = window.prompt("Please input the new file name (*.yaml)", "");
            if (name == "") {
              return;
            }
            if (name.indexOf(" ") != -1) {
              alert("File name cannot contain space");
              return;
            }
            const group = "{{.Group}}";
            const formData = new FormData();
            formData.append('action', 'rename');
            formData.append('group', group);
            formData.append('value', name);
            const resp = await fetch("", {
              method: "POST",
              headers: { 'Accept': 'application/json' },
              body: formData,
            })
            if (resp.ok) {
              window.location.href = resp.url;
            } else {
              const e = await resp.text();
              alert(e);
            }
          }}
        >
          <span>Rename</span>
        </button>
      </div>
    )
  }
  function MermaidC({ children, style = {} }) {
    const [html, setHtml] = React.useState("");
    const divRef = React.useRef(null);
    const mStyle = {
      ...style,
    };
    const dStyle = {
      overflowX: "auto",
    };

    React.useEffect(() => {
      if (!divRef.current) {
        return;
      }
      try {
        mermaid.mermaidAPI.initialize({
          securityLevel: "loose",
          startOnLoad: true,
          maxTextSize: 99999999,
          flowchart: {
            useMaxWidth: false,
            htmlLabels: true,
          },
        });
        mermaid.mermaidAPI.render("mermaid", children, (svgCode, bindFunc) => {
          setHtml(svgCode);
          setTimeout(() => {
            bindFunc(divRef.current);
          }, 500);
        }, divRef.current);
      } catch (error) {
        console.error(error);
        console.error(children);
      }
    }, [children, divRef]);
    const param = { __html: html }
    return (
      <div style={dStyle}>
        <div
          className="mermaid"
          dangerouslySetInnerHTML={param}
          ref={divRef}
          style={mStyle}
        >
        </div>
      </div>
    );
  }
  function StatusTag({ status, children }) {
    const style = React.useMemo(() => {
      return statusColorMapping[status] || {};
    }, [status])
    return (
      <span class="tag has-text-weight-semibold" style={style}>{children}</span>
    )
  }
  function ConfigEditor({ value, onChange, onSave, onCancel }) {
    const Editor = monaco_react.default;
    return (
      <div>
        <Editor
          height="60vh"
          defaultLanguage="yaml"
          defaultValue={value}
          onChange={onChange}
        />
        <div className="mt-4">
          <button className="button is-info" onClick={onSave}>Save</button>
          <button className="button ml-2" onClick={onCancel}>Cancel</button>
        </div>
      </div>
    )
  }
  function ConfigPreview({ value, onEdit }) {
    React.useEffect(() => {
      Prism.highlightAll();
    }, [value])
    return (
      <div>
        <pre><code className="language-yaml">{value}</code></pre>
        <button className="button is-info" onClick={onEdit}>Edit</button>
      </div>
    )
  }
  ReactDOM.render(<App />, document.getElementById('root'));
</script>
</div>
{{end}}